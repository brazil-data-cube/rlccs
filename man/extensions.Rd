% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/document.R, R/extensions.R, R/query.R
\name{RLCCSDocument}
\alias{RLCCSDocument}
\alias{extensions}
\alias{endpoint}
\alias{before_request}
\alias{after_response}
\alias{content_response}
\alias{check_query_verb}
\alias{check_subclass}
\alias{subclass}
\alias{omit_query_params}
\alias{RLCCSQuery}
\title{Document development functions}
\usage{
RLCCSDocument(content, q, subclass)

endpoint(q)

before_request(q)

after_response(q, res)

content_response(res, status_codes, content_types)

check_query_verb(q, verbs, msg = NULL)

check_subclass(x, subclasses)

subclass(x)

omit_query_params(q, names)

RLCCSQuery(
  base_url,
  params = list(),
  token = NULL,
  subclass,
  query_type = "key",
  encode = NULL
)
}
\arguments{
\item{content}{a \code{list} data structure representing the JSON file
received in HTTP response (see \code{\link{content_response}()} function)}

\item{q}{a \code{RLCCSQuery} object.}

\item{subclass}{a \code{character} corresponding to the subclass of the
object to be created.}

\item{res}{a \code{httr} \code{response} object.}

\item{status_codes}{a \code{character} vector with successful
status codes.}

\item{content_types}{a \code{character} vector with all acceptable
responses' content type.}

\item{verbs}{a \code{character} vector with allowed HTTP request methods}

\item{msg}{a \code{character} with a personalized error message}

\item{x}{either a \code{RLCCSQuery} object expressing a LCCS query
criteria or any \code{RLCCSDocument}.}

\item{subclasses}{a \code{character} vector with all allowed S3 subclasses}

\item{names}{a \code{character} vector with the names do omit.}

\item{base_url}{a \code{character} informing the base url of a
LCCS-WS (LCCS-WS-SPEC 0.6.0-0)}

\item{params}{a named \code{list} with all URL query parameters to be
appended in the URL.}

\item{token}{a \code{character} informing the authentication token in
the BDC-OAuth service. This token is used for the service's administrative
operations through the HTTP verbs POST, PUT, DELETE.}

\item{query_type}{a \code{character} representing the type of document that
should be sent to the LCCS-WS. With this parameter, you can specify when
rlccs should send the document in the format of a list (query_type = list) or
a document with JSON keys (query_type = key). Examples of use are given below:

To send {'key': 'value'} to the server, use the type \code{key}.
On the other hand, sending [{'key': 'value'}] must be done
with a type \code{list}}

\item{encode}{a \code{character} informing the request body
Content-Type. Accepted types are \code{'json'} (\code{'application/json'}),
\code{'form'} (\code{'application/x-www-form-urlencoded'}),
and \code{'multipart'} (\code{'multipart/form-data'}). Defaults to
\code{'json'}.}
}
\value{
The \code{RLCCSDocument()} function returns a \code{RLCCSDocument} object
with subclass defined by \code{subclass} parameter.

A \code{character} endpoint value for \code{endpoint()} function.
A \code{RLCCSQuery} object for \code{before_request()} and
\code{after_response()} functions.

The \code{content_response()} function returns a \code{list} data structure
representing the JSON file received in HTTP response

The \code{RSTACQuery()} function returns a \code{STACQuery} object with
subclass defined by \code{subclass} parameter.
}
\description{
Document development functions

Extension development functions

Extension development functions

Extension development functions

Extension development functions

Query development functions
}
\section{Functions}{
\itemize{
\item \code{RLCCSDocument}: The \code{RLCCSDocument()} function is a constructor of
LCCS documents. Currently, this class is used to represent the return of all
LCCS-WS endpoints. The general use of this document is possible since the
service return follows the same hierarchical structure.

\item \code{content_response}: The \code{content_response} function checks if the request's
response is in accordance with the allowed status codes and content-types.
It returns the parsed content response.

\item \code{check_query_verb}: The \code{check_query_verb()} function allows you to define which HTTP
verbs are allowed. It is useful for establishing which verbs will be
supported by an extension.

\item \code{check_subclass}: The \code{check_subclass()} function specifies which type of query
objects (\code{RLCCSQuery}) or document objects (\code{RLCCSDocument})
are expected in the function extension.

\item \code{subclass}: The \code{subclass()} function returns a \code{character} representing the
subclass name of either \code{RLCCSQuery} or \code{RSTACDocument} S3 classes.

\item \code{omit_query_params}: The \code{omit_query_params()} function was created to omit the paths that
are defined as query parameters to simplify the creation of a query.
Therefore, use this method only in endpoints that specify a parameter in
their paths.

\item \code{RLCCSQuery}: The \code{RLCCSQuery()} function is a constructor of \code{RLCCSQuery}
objects. Every extension must implement a subclass of \code{RLCCSQuery} to
represent its queries. This is done by informing to the \code{subclass}
parameter the extension's subclass name.

The \code{params} parameter is a named \code{list} where user parameters
must be stored. It is important to know if previous query parameters needs
to be keeped in the new query. If so, it is recommended do use
\code{\link[utils]{modifyList}()} function to merge the old and new
query parameters.
}}

